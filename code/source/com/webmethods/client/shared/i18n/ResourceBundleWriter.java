package com.webmethods.client.shared.i18n;

import com.webmethods.client.shared.log.Log;
import com.webmethods.lang.StringExt;
import java.io.*;
import java.lang.reflect.*;
import java.util.*;


/**
 * Writes a bundle as source code.
 */
public class ResourceBundleWriter
{
    /**
     * The resource bundle.
     */
    protected ResourceBundle bundle;

    /**
     * The keys that have been added, aside from those in the resource bundle.
     */
    protected Vector addedKeys;

    /**
     * Whether to write the contents in sorted order, as opposed to retaining
     * the original order, with new entries appended.
     */
    private boolean sorted;

    /**
     * The contents of the bundle.
     */
    private Set contents = null;

    /**
     * Creates the message formatter for the given resource bundle, with an
     * object to accept exceptions.
     */
    public ResourceBundleWriter(ResourceBundle bundle) 
    {
        this.bundle = bundle;
        sorted = true;
        addedKeys = new Vector();
    }

    /**
     * Sets whether to write contents in sorted order.
     */
    public void setSorted(boolean sorted)
    {
        this.sorted = sorted;
    }

    /**
     * Adds the given key.
     */
    public void addKey(String key)
    {
        addedKeys.add(key);
    }

    /**
     * Updates the source code of the bundle with the current settings.
     */
    public void update()
    {
        if (contents == null) {
            readContents();
        }

        // add the new keys.
        Iterator kit = addedKeys.iterator();
        while (kit.hasNext()) {
            String key = (String)kit.next();
            contents.add(new String[] { key, key });
        }
        addedKeys.clear();

        writeCode();
    }

    protected File findFile(String fname, String dir)
    {
        File f = new File(dir, fname);
        if (f.exists()) {
            return f;
        }
        else {
            File[] files = new File(dir).listFiles();

            for (int i = 0; files != null && i < files.length; ++i) {
                if (files[i].isDirectory()) {
                    f = findFile(fname, files[i].getAbsolutePath());
                    if (f != null) {
                        return f;
                    }
                }
            }

            for (int i = 0; files != null && i < files.length; ++i) {
                if (files[i].isFile() && files[i].getAbsolutePath().endsWith(fname)) {
                    return files[i];
                }
            }
        }

        return null;
    }

    protected void writeCode()
    {
        String bundClsName = bundle.getClass().getName();

        bundClsName = bundClsName.replaceAll("_en_US", "");

        int pos = bundClsName.lastIndexOf('.');
        String bundName = bundClsName.substring(pos + 1);
        String bundPkg = bundClsName.substring(0, pos);

        String bundFileName = bundClsName.replace('.', '/') + ".java";

        Vector code = new Vector();
        code.add("// This file was generated by ResourceBundleWriter " + (new Date()));
        code.add("");
        code.add("package " + bundPkg + ";");
        code.add("");
        code.add("import java.util.ListResourceBundle;");
        code.add("");
        code.add("");
        code.add("public class " + bundName + " extends ListResourceBundle");
        code.add("{");
        code.add("    /**");
        code.add("      * Returns the contents of the bundle.");
        code.add("      */");
        code.add("    public Object[][] getContents() ");
        code.add("    {");
        code.add("        return CONTENTS;");
        code.add("    }");
        code.add("");
        code.add("    private final static String[][] CONTENTS = {");

        int lastEntry = contents.size() - 1;
        Iterator cit = contents.iterator();
        for (int i = 0; cit.hasNext(); ++i) {
            String[] pair = (String[])cit.next();

            final int WIDTH = 40;
            // note: should be quoting strings being written:
            String lhs = "\"" + escapeQuotes(pair[0]) + "\",";
            String rhs = "\"" + escapeQuotes(pair[1]) + "\"";
            lhs = StringExt.pad(lhs, WIDTH);
            rhs = StringExt.pad(rhs, WIDTH);
            code.add("        { " + lhs + " " + rhs + " }" + (i == lastEntry ? "" : ","));
        }
        
        code.add("    };");
        code.add("");
        code.add("}");

        // Where the source code is:
        File srcFile = findFile(File.separator + bundFileName, "./source");
        
        if (srcFile == null) {
            srcFile = findFile(File.separator + bundFileName, "../source");
        }
        
        if (srcFile == null) {
        }
        else {
            writeCode(srcFile, code);
        }

        if (Log.verbose && false) {
            Iterator sit = code.iterator();
            while (sit.hasNext()) {
                String line = (String)sit.next();
                Log.log(line);
            }
        }
    }

    public static String escapeQuotes(String s)
    {
        StringBuffer buf = new StringBuffer(s);
        for (int i = 0; i < buf.length(); ++i) {
            if (buf.charAt(i) == '"') {
                buf.insert(i, "\\");
                ++i;
            }
        }
        return buf.toString();
    }

    protected void writeCode(File srcFile, Vector srcCode)
    {
        String eoline = System.getProperty("line.separator");

        for (int i = 0; i < 2; ++i) {
            try {
                FileWriter fw = new FileWriter(srcFile);
                Iterator   it = srcCode.iterator();
                while (it.hasNext()) {
                    String line = (String)it.next() + eoline;
                    fw.write(line);
                }
                fw.close();
            }
            catch (FileNotFoundException fnfe) {
                fnfe.printStackTrace(System.out);
                if (fnfe.getMessage().indexOf("(Permission denied)") > 0) {
                    makeWritable(srcFile);
                }
            }
            catch (IOException e) {
                e.printStackTrace(System.out);
            }
        }
    }

    /**
     * Reads the contents of the bundle.
     */
    protected void readContents()
    {
        if (sorted) {
            // sorted order
            contents = new TreeSet(new Comparator() {
                    public int compare(Object a, Object b) {
                        String[] aa = (String[])a;
                        String[] bb = (String[])b;
                        int c = aa[0].compareTo(bb[0]);
                        if (c == 0) {
                            c = aa[1].compareTo(bb[1]);
                        }
                        return c;
                    }

                    public boolean equals(Object a, Object b) {
                        String[] aa = (String[])a;
                        String[] bb = (String[])b;
                        return aa[0].equals(bb[0]) && aa[1].equals(bb[1]);
                    }
                });
        }
        else {
            // insertion order
            contents = new LinkedHashSet();
        }

        // jumping through hoops to get at the getContents method, which is
        // actually public in the subclass (but protected in
        // ListResourceBundle).
            
        try {
            Class      cls      = bundle.getClass();
            Method     cont     = cls.getMethod("getContents");
            Object[][] contList = (Object[][])cont.invoke(bundle);

            for (int i = 0; i < contList.length; ++i) {
                String key = (String)contList[i][0];
                String str = (String)contList[i][1];
                contents.add(new String[] { key, str });
            }
        }
        catch (NoSuchMethodException nsme) {
            nsme.printStackTrace(System.out);
        }
        catch (IllegalAccessException iae) {
            iae.printStackTrace(System.out);
        }
        catch (IllegalArgumentException iae) {
            iae.printStackTrace(System.out);
        }
        catch (InvocationTargetException ite) {
            ite.printStackTrace(System.out);
        }
    }

    /**
     * Called to make a nonwritable file writable. For example, this might be a
     * system call to a VCS application, to edit the file.
     */
    public void makeWritable(File srcFile)
    {
    }

}
